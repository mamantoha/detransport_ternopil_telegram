module DetransportTelegram
  class MessageHandler
    getter message : TelegramBot::Message
    getter bot : DetransportTelegram::Bot
    getter chat_id : Int64

    def initialize(@message, @bot)
      @chat_id = @message.chat.id
    end

    def handle
      if message_text = message.text
        handle_text(message, message_text)
      elsif message_location = message.location
        handle_covid19_message
        handle_location(message_location)
      else
        nil
      end
    end

    private def handle_text(message, text : String)
      if text.starts_with?("/")
        handle_commands(message, text)
      else
        handle_covid19_message
        handle_similar_stops(text)
      end
    end

    private def handle_commands(message, text : String)
      case text
      when /^\/(help|start)/
        handle_help
      when /^\/about/
        handle_about
      when /^\/ping/
        bot.reply(message, "üèì")
      when r = /^\/map(\d+)/
        if m = text.match(r)
          stop_id = m[1].to_i
          handle_stop_location(stop_id)
        end
      when r = /^\/info(\d+)/
        if m = text.match(r)
          stop_id = m[1].to_i
          handle_stop_info(stop_id)
        end
      else
        nil
      end
    end

    private def handle_covid19_message
      text = <<-TEXT
      –ù–∞ –ø–µ—Ä—ñ–æ–¥ –∫–∞—Ä–∞–Ω—Ç–∏–Ω—É –≤ –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ –ø—Ä–∏–∑—É–ø–∏–Ω–∏–Ω–µ–Ω–æ —Ä–æ–±–æ—Ç—É –≥—Ä–æ–º–∞–¥—Å—å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É.

      –ù–∞—Ç–æ–º—ñ—Å—Ç—å –∫—É—Ä—Å—É–≤–∞—Ç–∏–º—É—Ç—å —Å–ø–µ—Ü—Ä–µ–π—Å–∏.

      –°–ø–µ—Ü—Ä–µ–π—Å–∏ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç–∏–º—É—Ç—å –≤–∏–∫–ª—é—á–Ω–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –º–µ–¥–∏—á–Ω–∏—Ö —É—Å—Ç–∞–Ω–æ–≤, –∞–≤–∞—Ä—ñ–π–Ω–∏—Ö —Ç–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö —Å–ª—É–∂–±, –ø—Ä–∞–≤–æ–æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö —Å–ª—É–∂–±, —è–∫—ñ –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–±–µ–∑–ø–µ—á—É–≤–∞—Ç–∏ –∂–∏—Ç—Ç—è –º—ñ—Å—Ç–∞ –≤ —É–º–æ–≤–∞—Ö –∫–∞—Ä–∞–Ω—Ç–∏–Ω—É.

      –ü—ñ–¥ —á–∞—Å –∫–∞—Ä–∞–Ω—Ç–∏–Ω—É –∑–∞–ª–∏—à–∞–π—Ç–µ—Å—è –≤–¥–æ–º–∞! –ü–æ–¥–±–∞–π—Ç–µ –ø—Ä–æ —Å–∞–º–æ—ñ–∑–æ–ª—è—Ü—ñ—é. –ü—Ä–æ–≤–æ–¥—å—Ç–µ —á–∞—Å —ñ–∑ —Ä–æ–¥–∏–Ω–æ—é, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—è –ø—Ä–∞–≤–∏–ª –æ—Å–æ–±–∏—Å—Ç–æ—ó –≥—ñ–≥—ñ—î–Ω–∏ —Ç–∞ –±—É–¥—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ñ!

      –î—ñ–∑–Ω–∞–≤–∞–π—Ç–µ—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –∫–æ—Ä–æ–Ω–∞–≤—ñ—Ä—É—Å—É –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.

      https://t.me/covid19_ternopil
      TEXT

      bot.send_message(chat_id, text)
    end

    private def handle_similar_stops(stop : String)
      text = I18n.translate("messages.select_stop")
      stop = swap_keyboard_layout_from_latin_to_ua(stop)

      simital_stops = stops.similar_to(stop)

      buttons = build_keyboard_for_simital_stops(simital_stops)
      keyboard = TelegramBot::InlineKeyboardMarkup.new(buttons)

      bot.send_message(chat_id, text, reply_markup: keyboard)
    end

    private def handle_location(location : TelegramBot::Location)
      text = I18n.translate("messages.nearest_stops")

      nearest_stops = stops.nearest_to(location.latitude, location.longitude)

      buttons = build_keyboard_for_nearest_stops(nearest_stops, location)
      keyboard = TelegramBot::InlineKeyboardMarkup.new(buttons)

      bot.send_message(chat_id, text, reply_markup: keyboard)
    end

    private def handle_about
      text = <<-HEREDOC
      Build with:

      Crystal #{Crystal::VERSION}
      HEREDOC

      bot.send_message(chat_id, text, parse_mode: "Markdown")
    end

    private def handle_help
      text = I18n.translate("messages.help")

      buttons = [
        [
          TelegramBot::KeyboardButton.new(I18n.translate("messages.share_location"), request_contact: false, request_location: true),
        ],
      ]

      keyboard = TelegramBot::ReplyKeyboardMarkup.new(buttons, resize_keyboard: true)

      bot.send_message(chat_id, text, reply_markup: keyboard, parse_mode: "Markdown")
    end

    private def build_keyboard_for_nearest_stops(stops : Array(DetransportTelegram::DetransportAPI::Stop), location : TelegramBot::Location)
      stops.reduce([] of Array(TelegramBot::InlineKeyboardButton)) do |arry, stop|
        distance = Haversine.distance(stop.lat.to_f, stop.lng.to_f, location.latitude, location.longitude)
        text = "#{stop.full_name} - #{I18n.translate("messages.meters", count: distance.to_meters.to_i)}"
        arry << [TelegramBot::InlineKeyboardButton.new(text: text, callback_data: "#{stop.id}")]
      end
    end

    private def build_keyboard_for_simital_stops(stops : Array(DetransportTelegram::DetransportAPI::Stop))
      stops.reduce([] of Array(TelegramBot::InlineKeyboardButton)) do |arry, stop|
        text = "#{stop.full_name}"
        arry << [TelegramBot::InlineKeyboardButton.new(text: text, callback_data: "#{stop.id}")]
      end
    end

    private def stops
      detransport_api = DetransportTelegram::DetransportAPI.new

      detransport_api.stops
    end

    private def handle_stop_location(stop_id : Int32)
      if stop = stops.get_by_id(stop_id.to_s)
        coord = Geo::Coord.new(stop.lat.to_f, stop.lng.to_f)

        bot.send_venue(
          chat_id,
          latitude: stop.lat.to_f,
          longitude: stop.lng.to_f,
          title: stop.full_name,
          address: "\nüß≠ #{coord}"
        )
      end
    end

    private def handle_stop_info(stop_id : Int32)
      io = String::Builder.new

      if stop = stops.get_by_id(stop_id.to_s)
        io << stop.full_name
        io << "\n\n"
        io << I18n.translate("messages.vehicles_list")
        io << ":"
        io << "\n\n"
        stop.vehicles.each do |vehicle|
          io << "#{vehicle.icon} #{vehicle.name}"
          io << "\n"
        end
      else
        io << I18n.translate("messages.no_infomation")
      end

      bot.send_message(chat_id, io.to_s)
    end

    private def swap_keyboard_layout_from_latin_to_ua(text : String)
      chars_hash = {'q' => '–π', 'w' => '—Ü', 'e' => '—É', 'r' => '–∫', 't' => '–µ', 'y' => '–Ω', 'u' => '–≥', 'i' => '—à', 'o' => '—â', 'p' => '–∑', '[' => '—Ö', ']' => '—ó', '\\' => '“ë', 'a' => '—Ñ', 's' => '—ñ', 'd' => '–≤', 'f' => '–∞', 'g' => '–ø', 'h' => '—Ä', 'j' => '–æ', 'k' => '–ª', 'l' => '–¥', ';' => '–∂', '\'' => '—î', 'z' => '—è', 'x' => '—á', 'c' => '—Å', 'v' => '–º', 'b' => '–∏', 'n' => '—Ç', 'm' => '—å', ',' => '–±', '.' => '—é', '/' => '.', 'Q' => '–ô', 'W' => '–¶', 'E' => '–£', 'R' => '–ö', 'T' => '–ï', 'Y' => '–ù', 'U' => '–ì', 'I' => '–®', 'O' => '–©', 'P' => '–ó', '{' => '–•', '}' => '–á', '|' => '“ê', 'A' => '–§', 'S' => '–Ü', 'D' => '–í', 'F' => '–ê', 'G' => '–ü', 'H' => '–†', 'J' => '–û', 'K' => '–õ', 'L' => '–î', ':' => '–ñ', '"' => '–Ñ', 'Z' => '–Ø', 'X' => '–ß', 'C' => '–°', 'V' => '–ú', 'B' => '–ò', 'N' => '–¢', 'M' => '–¨', '<' => '–ë', '>' => '–Æ', '?' => ','}
      text.gsub(chars_hash)
    end
  end
end
